version: '3'
services:
  db-primary:
    image: postgres:13
    restart: always
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=mydatabase
      - POSTGRES_SYNCHRONOUS_COMMIT=on
      - POSTGRES_SYNCHRONOUS_STANDBY_NAMES=*
    networks:
      - my-network
    hostname: primary-db

  db-secondary:
    image: postgres:13
    restart: always
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_DB=mydatabase
      - POSTGRES_SYNCHRONOUS_COMMIT=on
      - POSTGRES_SYNCHRONOUS_STANDBY_NAMES=*
      - POSTGRES_PRIMARY_HOST=db-primary
      - POSTGRES_PRIMARY_PORT=5432
    networks:
      - my-network
    hostname: secondary-db

  api-primary:
    build:
      context: ./api
    restart: always
    expose:
      - 5000
    ports:
      - '8080:5000'  # Updated port mapping
    depends_on:
      - db-primary
      - db-secondary
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-primary:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  api-standby-1:
    build:
      context: ./api
    restart: always
    expose:
      - 5000
    depends_on:
      - db-primary
      - db-secondary
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-standby-1:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  api-standby-2:
    build:
      context: ./api
    restart: always
    expose:
      - 5000
    depends_on:
      - db-primary
      - db-secondary
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-standby-2:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  load-balancer:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - '80:80'
    depends_on:
      - api-primary
      - api-standby-1
      - api-standby-2
    networks:
      - my-network

  prometheus:
    image: prom/prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - my-network

  grafana:
    image: grafana/grafana
    ports:
      - '3000:3000'
    volumes:
      - ./grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
     - my-network

networks:
  my-network:
